#@base <http://json-ld.org/test-suite/> .
@prefix : <http://www.w3.org/2006/03/test-description#> .
@prefix dc: <http://purl.org/dc/elements/1.1/> .
@prefix log: <http://www.w3.org/2000/10/swap/log#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix jld: <http://json-ld.org/test-suite/vocab#> .

<test-cases/rdf-0001> dc:contributor "Gregg Kellogg";
  dc:title "Plain literal with URIs";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0001.jsonld>;
  :informationResourceResults <test-cases/rdf-0001.sparql>;
  :purpose "Tests generation of a triple using full URIs and a plain literal.";
  :specificationReference <http://json-ld.org/spec/latest/#plain-literals>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0002> dc:contributor "Gregg Kellogg";
  dc:title "Plain literal with CURIE from default context";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0002.jsonld>;
  :informationResourceResults <test-cases/rdf-0002.sparql>;
  :purpose "Tests generation of a triple using a CURIE defined in the default context.";
  :specificationReference <http://json-ld.org/spec/latest/#iris>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0003> dc:contributor "Gregg Kellogg";
  dc:title "Default subject is BNode";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0003.jsonld>;
  :informationResourceResults <test-cases/rdf-0003.sparql>;
  :purpose "Tests that a BNode is created if no explicit subject is set.";
  :specificationReference <http://json-ld.org/spec/latest/#the-json-ld-processing-algorithm>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0004> dc:contributor "Gregg Kellogg";
  dc:title "Literal with language tag";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0004.jsonld>;
  :informationResourceResults <test-cases/rdf-0004.sparql>;
  :purpose "Tests that a plain literal is created with a language tag.";
  :specificationReference <http://json-ld.org/spec/latest/#language-specification-in-plain-literals>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0005> dc:contributor "Gregg Kellogg";
  dc:title "Extended character set literal";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0005.jsonld>;
  :informationResourceResults <test-cases/rdf-0005.sparql>;
  :purpose "Tests that a literal may be created using extended characters.";
  :specificationReference "";
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0006> dc:contributor "Gregg Kellogg";
  dc:title "Typed literal";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0006.jsonld>;
  :informationResourceResults <test-cases/rdf-0006.sparql>;
  :purpose "Tests creation of a literal with a datatype.";
  :specificationReference <http://json-ld.org/spec/latest/#typed-literals>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0007> dc:contributor "Gregg Kellogg";
  dc:title "Tests 'a' generates rdf:type and object is implicit IRI";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0007.jsonld>;
  :informationResourceResults <test-cases/rdf-0007.sparql>;
  :purpose "Verify that 'a' is an alias for rdf:type, and the object is created as an IRI.";
  :specificationReference <http://json-ld.org/spec/latest/#the-json-ld-processing-algorithm>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0008> dc:contributor "Gregg Kellogg";
  dc:title "Test prefix defined in @context";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0008.jsonld>;
  :informationResourceResults <test-cases/rdf-0008.sparql>;
  :purpose "Generate an IRI using a prefix defined within an @context.";
  :specificationReference <http://json-ld.org/spec/latest/#the-json-ld-processing-algorithm>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0009> dc:contributor "Gregg Kellogg";
  dc:title "Test using default prefix";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0009.jsonld>;
  :informationResourceResults <test-cases/rdf-0009.sparql>;
  :purpose "The empty string may be used to define the default prefix.";
  :specificationReference "";
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0010> dc:contributor "Gregg Kellogg";
  dc:title "Test object processing defines object";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0010.jsonld>;
  :informationResourceResults <test-cases/rdf-0010.sparql>;
  :purpose "A property referencing an associative array gets object from subject of array.";
  :specificationReference <http://json-ld.org/spec/latest/#the-json-ld-processing-algorithm>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0011> dc:contributor "Gregg Kellogg";
  dc:title "Test object processing defines object with implicit BNode";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0011.jsonld>;
  :informationResourceResults <test-cases/rdf-0011.sparql>;
  :purpose "If no @ is specified, a BNode is created, and will be used as the object of an enclosing property.";
  :specificationReference <http://json-ld.org/spec/latest/#the-json-ld-processing-algorithm>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0012> dc:contributor "Gregg Kellogg";
  dc:title "Multiple Objects for a Single Property";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0012.jsonld>;
  :informationResourceResults <test-cases/rdf-0012.sparql>;
  :purpose "Tests that Multiple Objects are for a Single Property using array syntax.";
  :specificationReference <http://json-ld.org/spec/latest/#multiple-objects-for-a-single-property>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0013> dc:contributor "Gregg Kellogg";
  dc:title "Creation of an empty list";
  a :TestCase, jld:SPARQLTest;
  :classification :optional;
  :informationResourceInput <test-cases/rdf-0013.jsonld>;
  :informationResourceResults <test-cases/rdf-0013.sparql>;
  :purpose "Tests that [[]] generates an empty list.";
  :specificationReference "If the value is a regular array, should we support RDF List/Sequence generation of triples?";
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0014> dc:contributor "Gregg Kellogg";
  dc:title "Creation of a list with single element";
  a :TestCase, jld:SPARQLTest;
  :classification :optional;
  :informationResourceInput <test-cases/rdf-0014.jsonld>;
  :informationResourceResults <test-cases/rdf-0014.sparql>;
  :purpose "Tests that [[a]] generates list.";
  :specificationReference "If the value is a regular array, should we support RDF List/Sequence generation of triples?";
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0015> dc:contributor "Gregg Kellogg";
  dc:title "Creation of a list with multiple elements";
  a :TestCase, jld:SPARQLTest;
  :classification :optional;
  :informationResourceInput <test-cases/rdf-0015.jsonld>;
  :informationResourceResults <test-cases/rdf-0015.sparql>;
  :purpose "Tests that list with multiple elements.";
  :specificationReference "If the value is a regular array, should we support RDF List/Sequence generation of triples?";
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0016> dc:contributor "Gregg Kellogg";
  dc:title "Test @base";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0016.jsonld>;
  :informationResourceResults <test-cases/rdf-0016.sparql>;
  :purpose "Tests using @base in @context for IRI processing.";
  :specificationReference <http://json-ld.org/spec/latest/#the-json-ld-processing-algorithm>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0017> dc:contributor "Gregg Kellogg";
  dc:title "Test @vocab";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0017.jsonld>;
  :informationResourceResults <test-cases/rdf-0017.sparql>;
  :purpose "Tests using @vocab in @context for IRI processing.";
  :specificationReference <http://json-ld.org/spec/latest/#the-json-ld-processing-algorithm>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0018> dc:contributor "Gregg Kellogg";
  dc:title "Test @base and @vocab together";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0018.jsonld>;
  :informationResourceResults <test-cases/rdf-0018.sparql>;
  :purpose "Tests using @base and @vocab in @context for IRI processing.";
  :specificationReference <http://json-ld.org/spec/latest/#the-json-ld-processing-algorithm>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0019> dc:contributor "Gregg Kellogg";
  dc:title "Test type coercion to anyURI";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0019.jsonld>;
  :informationResourceResults <test-cases/rdf-0019.sparql>;
  :purpose "Tests coercion of object to anyURI when specified.";
  :specificationReference <http://json-ld.org/spec/latest/#type-coercion>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0020> dc:contributor "Gregg Kellogg";
  dc:title "Test type coercion to typed literal";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0020.jsonld>;
  :informationResourceResults <test-cases/rdf-0020.sparql>;
  :purpose "Tests coercion of object to a typed literal when specified.";
  :specificationReference <http://json-ld.org/spec/latest/#type-coercion>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0021> dc:contributor "Gregg Kellogg";
  dc:title "Test coercion of decimal value";
  a :TestCase, jld:SPARQLTest;
  :classification :buggy;
  :informationResourceInput <test-cases/rdf-0021.jsonld>;
  :informationResourceResults <test-cases/rdf-0021.sparql>;
  :purpose "Tests that a decimal value generates a xsd:decimal typed literal (buggy test).";
  :specificationReference <http://json-ld.org/spec/latest/#automatic-typing>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0022> dc:contributor "Gregg Kellogg";
  dc:title "Test coercion of double value";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0022.jsonld>;
  :informationResourceResults <test-cases/rdf-0022.sparql>;
  :purpose "Tests that a decimal value generates a xsd:double typed literal;.";
  :specificationReference <http://json-ld.org/spec/latest/#automatic-typing>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0023> dc:contributor "Gregg Kellogg";
  dc:title "Test coercion of integer value";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0023.jsonld>;
  :informationResourceResults <test-cases/rdf-0023.sparql>;
  :purpose "Tests that a decimal value generates a xsd:integer typed literal.";
  :specificationReference <http://json-ld.org/spec/latest/#automatic-typing>;
  :expectedResults "true"^^xsd:boolean .

<test-cases/rdf-0024> dc:contributor "Gregg Kellogg";
  dc:title "Test coercion of boolean value";
  a :TestCase, jld:SPARQLTest;
  :classification :required;
  :informationResourceInput <test-cases/rdf-0024.jsonld>;
  :informationResourceResults <test-cases/rdf-0024.sparql>;
  :purpose "Tests that a decimal value generates a xsd:boolean typed literal.";
  :specificationReference <http://json-ld.org/spec/latest/#automatic-typing>;
  :expectedResults "true"^^xsd:boolean .
