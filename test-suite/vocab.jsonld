{
  "@context": {
    "rdfs": "http://www.w3.org/2000/01/rdf-schema#",
    "rdf": "http://www.w3.org/1999/02/22-rdf-syntax-ns#",
    "dc": "http://purl.org/dc/elements/1.1/",
    "mf": "http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#",
    "xsd": "http://www.w3.org/2001/XMLSchema#",
    "jld": "http://json-ld.org/test-suite/vocab#",
    "jld:Test": {"@type": "@id"},
    "dc:identifier": {"@type": "@id"},
    "rdfs:subClassOf": {"@type": "@id"},
    "rdfs:domain": {"@type": "@id"},
    "rdfs:range": {"@type": "@id"}
  },
  "@graph": [{
    "@id": "../test-suite/vocab",
    "jld:Test": "rdf:type",
    "dc:creator": "Gregg Kellogg",
    "dc:date": "2013-09-23",
    "dc:description": "Test case manifest vocabulary extensions",
    "dc:identifier": "../test-suite/vocab",
    "dc:publisher": "W3C Linked JSON Community Group",
    "dc:title": "Test case manifest vocabulary extensions",
    "rdfs:comment": "Manifest vocabulary for JSON-LD test cases"
  }, {
    "@id": "jld:CompactTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A CompactTest modifies either a PositiveEvaluationTest, NegativeEvaluationTest,\n    PositiveSyntaxTest or NegativeSyntaxTest. Tests are run using the compact method\n    (http://json-ld.org/spec/latest/json-ld-api/index.html#widl-JsonLdProcessor-compact-Promise-any-input-JsonLdContext-context-JsonLdOptions-options)\n    with the input argument from mf:action referencing a JSON-LD file in expanded form, context from :input and optional options\n    from :option. The expected results for a PositiveEvaluationTest MUST be compared using JSON object comparison with the processor output.\n  ",
    "rdfs:label": "Compact Evaluation Test"
  }, {
    "@id": "jld:ExpandTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A ExpandTest modifies either a PositiveEvaluationTest, NegativeEvaluationTest,\n    PositiveSyntaxTest or NegativeSyntaxTest. Tests are run using the expand method\n    (http://json-ld.org/spec/latest/json-ld-api/index.html#widl-JsonLdProcessor-expand-Promise-any-input-JsonLdOptions-options)\n    with the input argument from mf:action referencing a JSON-LD file, and optional options\n    from :option. The expected results for a PositiveEvaluationTest MUST be compared using JSON object comparison with the processor output.\n  ",
    "rdfs:label": "Expand Evaluation Test"
  }, {
    "@id": "jld:FlattenTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A FlattenTest modifies either a PositiveEvaluationTest, NegativeEvaluationTest,\n    PositiveSyntaxTest or NegativeSyntaxTest. Tests are run using the flatten method\n    (http://json-ld.org/spec/latest/json-ld-api/index.html#widl-JsonLdProcessor-flatten-Promise-any-input-JsonLdContext-context-JsonLdOptions-options)\n    with the input argument from mf:action referencing a JSON-LD file, optional context from :input and optional options\n    from :option. The expected results for a PositiveEvaluationTest MUST be compared using JSON object comparison with the processor output.\n  ",
    "rdfs:label": "Flatten Evaluation Test"
  }, {
    "@id": "jld:FrameTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A FrameTest modifies either a PositiveEvaluationTest, NegativeEvaluationTest,\n    PositiveSyntaxTest or NegativeSyntaxTest. Tests are run using the frame method\n    (http://json-ld.org/spec/latest/json-ld-framing/#widl-JsonLdProcessor-frame-void-object-or-object---or-IRI-input-object-or-IRI-frame-JsonLdCallback-callback-JsonLdOptions-options)\n    with the input argument from mf:action referencing a JSON-LD file, frame from :input and optional options\n    from :option. The expected results for a PositiveEvaluationTest MUST be compared using JSON object comparison with the processor output.\n  ",
    "rdfs:label": "Frame Evaluation Test"
  }, {
    "@id": "jld:FromRDFTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A FromRDFTest modifies either a PositiveEvaluationTest, NegativeEvaluationTest,\n    PositiveSyntaxTest or NegativeSyntaxTest. Tests are run using the \"RDF to Object Conversion\" algorithm\n    (http://json-ld.org/spec/latest/json-ld-api/index.html#rdf-to-object-conversion)\n    with the input argument from mf:action referencing an N-Quads file and optional options\n    from :option. The expected results for a PositiveEvaluationTest MUST be compared using JSON object comparison with the processor output.\n  ",
    "rdfs:label": "From RDF Evaluation Test"
  }, {
    "@id": "jld:NegativeEvaluationTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A Negative Evaluation test is successful when the result of processing\n    the input file specified as mf:action results in the error identified\n    by the literal value of mf:result. The specifics of invoking test, including\n    the interpretation of options (:option) and other input files are\n    specified through another class.\n  ",
    "rdfs:label": "Positive Evaluation Test",
    "rdfs:subClassOf": "jld:Test"
  }, {
    "@id": "jld:NegativeSyntaxTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A type of test specifically for syntax testing.\n    Syntax tests are not required to have an associated result, only an action.\n    Negative syntax tests are tests of which the result should be a parser error.\n  ",
    "rdfs:label": "Negative Syntax Test",
    "rdfs:subClassOf": "jld:Test"
  }, {
    "@id": "jld:NormalizeTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A NormalizeTest modifies either a PositiveEvaluationTest, NegativeEvaluationTest,\n    PositiveSyntaxTest or NegativeSyntaxTest. Tests are run using the \"Normalization\" algorithm\n    (http://json-ld.org/spec/latest/rdf-graph-normalization/#normalization-algorithm)\n    with the input argument from mf:action referencing an JSON-LD file and optional options\n    from :option. The expected results for a PositiveEvaluationTest are N-Quads serialized in lexographical order\n    and MUST be compared using string comparison.\n  ",
    "rdfs:label": "Normalization Evaluation Test"
  }, {
    "@id": "jld:Option",
    "@type": "rdfs:Class",
    "rdfs:label": "Processor Options"
  }, {
    "@id": "jld:PositiveEvaluationTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A Positive Evaluation test is successful when the result of processing\n    the input file specified as mf:action exactly matches the output file\n    specified as mf:result using the comparison defined in\n    another class. The specifics of invoking test, including\n    the interpretation of options (:option) and other input files are\n    specified through another class.\n  ",
    "rdfs:label": "Positive Evaluation Test",
    "rdfs:subClassOf": "jld:Test"
  }, {
    "@id": "jld:PositiveSyntaxTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "A type of test specifically for syntax testing. Syntax tests are not required to have an associated result, only an action.",
    "rdfs:label": "Positive Syntax Test",
    "rdfs:subClassOf": "jld:Test"
  }, {
    "@id": "jld:ToRDFTest",
    "@type": "rdfs:Class",
    "rdfs:comment": "\n    A ToRDFTest modifies either a PositiveEvaluationTest, NegativeEvaluationTest,\n    PositiveSyntaxTest or NegativeSyntaxTest. Tests are run using the \"Deserialize JSON-LD to RDF algorithm\" algorithm\n    (http://json-ld.org/spec/latest/json-ld-api/index.html#deserialize-json-ld-to-rdf-algorithm)\n    with the input argument from mf:action referencing an JSON-LD file and optional options\n    from :option. The expected results for a PositiveEvaluationTest are N-Quads serialized in lexographical order\n    and MUST be compared either string comparison or Dataset as defined\n    in [RDF11-CONCEPTS](http://www.w3.org/TR/rdf11-concepts/#section-dataset-isomorphism).\n  ",
    "rdfs:label": "To RDF Evaluation Test"
  }, {
    "@id": "jld:base",
    "@type": "rdf:Property",
    "rdfs:comment": "The base IRI to use when expanding or compacting the document. If set, this overrides the input document's IRI.",
    "rdfs:domain": "jld:Test",
    "rdfs:range": "rdfs:Resource"
  }, {
    "@id": "jld:compactArrays",
    "@type": "rdf:Property",
    "rdfs:comment": "If set to true, the JSON-LD processor replaces arrays with just one element with that element during compaction. If set to false, all arrays will remain arrays even if they have just one element.",
    "rdfs:domain": "jld:Test",
    "rdfs:range": "xsd:boolean"
  }, {
    "@id": "jld:documentLoader",
    "@type": "rdf:Property",
    "rdfs:comment": "The callback of the loader to be used to retrieve remote documents and contexts. If specified, it must be used to retrieve remote documents and contexts; otherwise, if not specified, the processor's built-in loader must be used.",
    "rdfs:domain": "jld:Test",
    "rdfs:range": "xsd:string"
  }, {
    "@id": "jld:expandContext",
    "@type": "rdf:Property",
    "rdfs:comment": "A context that is used to initialize the active context when expanding a document.",
    "rdfs:domain": "jld:Test",
    "rdfs:range": "rdfs:Resource"
  }, {
    "@id": "jld:input",
    "@type": "rdf:Property",
    "rdfs:comment": "Secondary input file",
    "rdfs:domain": "jld:Test",
    "rdfs:range": "rdfs:Resource"
  }, {
    "@id": "jld:option",
    "@type": "rdf:Property",
    "rdfs:comment": "Options affecting processing",
    "rdfs:domain": "jld:Test",
    "rdfs:range": "jld:Option"
  }, {
    "@id": "jld:processingMode",
    "@type": "rdf:Property",
    "rdfs:comment": "\n    If set to json-ld-1.0, the JSON-LD processor must produce exactly the same results as\n    the algorithms defined in this specification.\n    If set to another value, the JSON-LD processor is allowed to extend or modify\n    the algorithms defined in this specification to enable application-specific optimizations.\n    The definition of such optimizations is beyond the scope of this specification and thus not defined.\n    Consequently, different implementations may implement different optimizations.\n    Developers must not define modes beginning with json-ld as they are reserved for future versions of this specification.\n    ",
    "rdfs:domain": "jld:Test",
    "rdfs:range": "xsd:string"
  }, {
    "@id": "jld:produceGeneralizedRDF",
    "@type": "rdf:Property",
    "rdfs:comment": "Unless the produce generalized RDF flag is set to true, RDF triples containing a blank node predicate are excluded from output.",
    "rdfs:domain": "jld:ToRDFTest",
    "rdfs:range": "xsd:boolean"
  }, {
    "@id": "jld:useNativeTypes",
    "@type": "rdf:Property",
    "rdfs:comment": "\n      If the use native types flag is set to true, RDF literals with a datatype IRI tha\n      equals xsd:integer or xsd:double are converted to a JSON numbers and RDF literals\n      with a datatype IRI that equals xsd:boolean are converted to true or false based\n      on their lexical form.\n      ",
    "rdfs:domain": "jld:FromRDFTest",
    "rdfs:range": "xsd:boolean"
  }]
}